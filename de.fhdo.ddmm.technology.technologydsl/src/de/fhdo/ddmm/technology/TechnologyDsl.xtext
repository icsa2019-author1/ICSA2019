/**
 * 
 */
grammar de.fhdo.ddmm.technology.TechnologyDsl with de.fhdo.ddmm.data.DataDsl

import "de.fhdo.ddmm.technology"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "de.fhdo.ddmm.data" as data

Technology returns Technology:
    imports+=TechnologyImport*
    'technology' name=ID '{'
        ('types' '{'
            (primitiveTypes+=TechnologySpecificPrimitiveType |
                listTypes+=TechnologySpecificListType |
                dataStructures+=TechnologySpecificDataStructure
            )+

            ('compatibility' 'matrix' '{'
                compatibilityEntries+=CompatibilityMatrixEntry+
            '}')?
        '}')?

        ('protocols' '{'
            protocols+=Protocol+
        '}')?

        ('service' 'aspects' '{'
            serviceAspects+=ServiceAspect+
        '}')?

        ('deployment' 'technologies' '{'
            deploymentTechnologies+=DeploymentTechnology+
        '}')?

        ('infrastructure' 'technologies' '{'
            infrastructureTechnologies+=InfrastructureTechnology+
        '}')?

        ('operation' 'aspects' '{'
            operationAspects+=OperationAspect+
        '}')?
    '}'
;

TechnologyImport returns TechnologyImport:
    'import' 'technology' 'from' importURI=STRING 'as' name=ID
;

Protocol returns Protocol:
    communicationType=CommunicationType
    name=ID
    'data' 'formats' dataFormats+=DataFormat (',' dataFormats+=DataFormat)*
    (default?='default' 'with' 'format' defaultFormat=[DataFormat])?
    ';'
;

enum ExchangePattern returns ExchangePattern:
    IN='in' | OUT='out' | INOUT='inout'
;

enum CommunicationType returns CommunicationType:
    SYNCHRONOUS='sync' | ASYNCHRONOUS='async'
;

DataFormat returns DataFormat:
    formatName=ID
;

TechnologySpecificPrimitiveType returns TechnologySpecificPrimitiveType:
    'primitive' 'type' name=ID
    (
        'based' 'on' basicBuiltinPrimitiveTypes+=PrimitiveType
            (',' basicBuiltinPrimitiveTypes+=PrimitiveType)*
        (default?='default')?
    )? ';'
;

TechnologySpecificListType returns TechnologySpecificListType:
    'list' 'type' name=ID ';'
;

TechnologySpecificDataStructure returns TechnologySpecificDataStructure:
    'structure' 'type' name=ID ';'
;

PossiblyImportedTechnologySpecificType returns PossiblyImportedTechnologySpecificType:
    (^import=[TechnologyImport] '::')? type=[data::Type|QualifiedName]
;

enum CompatibilityDirection returns CompatibilityDirection:
    MAPPING_TO_COMPATIBLE_TYPES='<-' |
    COMPATIBLE_TYPES_TO_MAPPING='->' |
    BIDIRECTIONAL='<->'
;

CompatibilityMatrixEntry returns CompatibilityMatrixEntry:
    compatibleTypes+=PossiblyImportedTechnologySpecificType
    (',' compatibleTypes+=PossiblyImportedTechnologySpecificType)*
    direction=CompatibilityDirection
    mappingType=PossiblyImportedTechnologySpecificType
    ';'
;

DeploymentTechnology returns DeploymentTechnology:
    name=ID '{'
        'operation' 'environments' '=' operationEnvironments+=OperationEnvironment
            (',' operationEnvironments+=OperationEnvironment)*
            ';'

        ('service' 'properties' '{'
            serviceProperties+=TechnologySpecificProperty+
        '}')?
    '}'
;

InfrastructureTechnology returns InfrastructureTechnology:
    name=ID '{'
        'operation' 'environments' '=' operationEnvironments+=OperationEnvironment
            (',' operationEnvironments+=OperationEnvironment)*
            ';'

        ('service' 'properties' '{'
            serviceProperties+=TechnologySpecificProperty+
        '}')?
    '}'
;

OperationEnvironment returns OperationEnvironment:
    environmentName=STRING (default?='default')?
;

TechnologySpecificProperty returns TechnologySpecificProperty:
    type=PrimitiveType name=ID
    ('=' defaultValue=PrimitiveValue | mandatory?='mandatory')?
    ';'
;

PrimitiveValue returns data::PrimitiveValue:
    numericValue=BIG_DECIMAL | booleanValue=BOOLEAN | stringValue=STRING
;

enum ServiceJoinPointType returns JoinPointType:
    MICROSERVICES = 'microservices' |
    INTERFACES = 'interfaces' |
    OPERATIONS = 'operations' |
    PARAMETERS = 'parameters' |
    DATA_FIELDS = 'fields'
;

enum OperationJoinPointType returns JoinPointType:
    CONTAINERS = 'containers' | INFRASTRUCTURE_NODES = 'infrastructure'
;

ServiceAspectPointcut returns ServiceAspectPointcut:
    forExchangePattern?='exchange_pattern' '=' exchangePattern=ExchangePattern |
    forCommunicationType?='communication_type' '=' communicationType=CommunicationType |
    forProtocol?='protocol' '=' protocol=[Protocol] |
    forDataFormat?='data_format' '=' dataFormat=[DataFormat]
;

ServiceAspectPointcutSelector returns ServiceAspectPointcutSelector:
    'selector' '('
        pointcuts+=ServiceAspectPointcut (',' pointcuts+=ServiceAspectPointcut)*
    ')' ';'
;

ServiceAspect returns ServiceAspect:
    'aspect' name=ID
    'for' joinPoints+=ServiceJoinPointType (',' joinPoints+=ServiceJoinPointType)*
    (
        ('{'
            pointcutSelectors+=ServiceAspectPointcutSelector*
            properties+=TechnologySpecificProperty*
        '}')
        |
        ';'
    )
;

OperationAspect returns OperationAspect:
    'aspect' name=ID
    'for' joinPoints+=OperationJoinPointType (',' joinPoints+=OperationJoinPointType)*
    (
        ('{'
            properties+=TechnologySpecificProperty*
        '}')
        |
        ';'
    )
;