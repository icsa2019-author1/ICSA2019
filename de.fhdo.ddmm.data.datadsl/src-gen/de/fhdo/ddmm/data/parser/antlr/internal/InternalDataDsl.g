/*
 * generated by Xtext 2.12.0
 */
grammar InternalDataDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.fhdo.ddmm.data.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fhdo.ddmm.data.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fhdo.ddmm.data.services.DataDslGrammarAccess;

}

@parser::members {

 	private DataDslGrammarAccess grammarAccess;

    public InternalDataDslParser(TokenStream input, DataDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DataModel";
   	}

   	@Override
   	protected DataDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDataModel
entryRuleDataModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataModelRule()); }
	iv_ruleDataModel=ruleDataModel
	{ $current=$iv_ruleDataModel.current; }
	EOF;

// Rule DataModel
ruleDataModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDataModelAccess().getComplexTypeImportsComplexTypeImportParserRuleCall_0_0());
				}
				lv_complexTypeImports_0_0=ruleComplexTypeImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataModelRule());
					}
					add(
						$current,
						"complexTypeImports",
						lv_complexTypeImports_0_0,
						"de.fhdo.ddmm.data.DataDsl.ComplexTypeImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDataModelAccess().getVersionsVersionParserRuleCall_1_0_0());
					}
					lv_versions_1_0=ruleVersion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataModelRule());
						}
						add(
							$current,
							"versions",
							lv_versions_1_0,
							"de.fhdo.ddmm.data.DataDsl.Version");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDataModelAccess().getContextsContextParserRuleCall_1_1_0());
					}
					lv_contexts_2_0=ruleContext
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataModelRule());
						}
						add(
							$current,
							"contexts",
							lv_contexts_2_0,
							"de.fhdo.ddmm.data.DataDsl.Context");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDataModelAccess().getComplexTypesComplexTypeParserRuleCall_1_2_0());
					}
					lv_complexTypes_3_0=ruleComplexType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataModelRule());
						}
						add(
							$current,
							"complexTypes",
							lv_complexTypes_3_0,
							"de.fhdo.ddmm.data.DataDsl.ComplexType");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
	)
;

// Entry rule entryRuleComplexTypeImport
entryRuleComplexTypeImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexTypeImportRule()); }
	iv_ruleComplexTypeImport=ruleComplexTypeImport
	{ $current=$iv_ruleComplexTypeImport.current; }
	EOF;

// Rule ComplexTypeImport
ruleComplexTypeImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getComplexTypeImportAccess().getImportKeyword_0());
		}
		otherlv_1='datatypes'
		{
			newLeafNode(otherlv_1, grammarAccess.getComplexTypeImportAccess().getDatatypesKeyword_1());
		}
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getComplexTypeImportAccess().getFromKeyword_2());
		}
		(
			(
				lv_importURI_3_0=RULE_STRING
				{
					newLeafNode(lv_importURI_3_0, grammarAccess.getComplexTypeImportAccess().getImportURISTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTypeImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getComplexTypeImportAccess().getAsKeyword_4());
		}
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getComplexTypeImportAccess().getNameIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplexTypeImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	iv_ruleVersion=ruleVersion
	{ $current=$iv_ruleVersion.current; }
	EOF;

// Rule Version
ruleVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='version'
		{
			newLeafNode(otherlv_0, grammarAccess.getVersionAccess().getVersionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVersionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVersionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVersionAccess().getComplexTypesComplexTypeParserRuleCall_3_0_0());
					}
					lv_complexTypes_3_0=ruleComplexType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVersionRule());
						}
						add(
							$current,
							"complexTypes",
							lv_complexTypes_3_0,
							"de.fhdo.ddmm.data.DataDsl.ComplexType");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVersionAccess().getContextsContextParserRuleCall_3_1_0());
					}
					lv_contexts_4_0=ruleContext
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVersionRule());
						}
						add(
							$current,
							"contexts",
							lv_contexts_4_0,
							"de.fhdo.ddmm.data.DataDsl.Context");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getVersionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	iv_ruleContext=ruleContext
	{ $current=$iv_ruleContext.current; }
	EOF;

// Rule Context
ruleContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getContextAccess().getContextKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContextAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContextRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getContextAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContextAccess().getComplexTypesComplexTypeParserRuleCall_3_0());
				}
				lv_complexTypes_3_0=ruleComplexType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContextRule());
					}
					add(
						$current,
						"complexTypes",
						lv_complexTypes_3_0,
						"de.fhdo.ddmm.data.DataDsl.ComplexType");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getContextAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleComplexType
entryRuleComplexType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexTypeRule()); }
	iv_ruleComplexType=ruleComplexType
	{ $current=$iv_ruleComplexType.current; }
	EOF;

// Rule ComplexType
ruleComplexType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComplexTypeAccess().getDataStructureParserRuleCall_0());
		}
		this_DataStructure_0=ruleDataStructure
		{
			$current = $this_DataStructure_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComplexTypeAccess().getListTypeParserRuleCall_1());
		}
		this_ListType_1=ruleListType
		{
			$current = $this_ListType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataStructure
entryRuleDataStructure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataStructureRule()); }
	iv_ruleDataStructure=ruleDataStructure
	{ $current=$iv_ruleDataStructure.current; }
	EOF;

// Rule DataStructure
ruleDataStructure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='structure'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataStructureAccess().getStructureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataStructureAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataStructureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getDataStructureAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDataStructureRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDataStructureAccess().getSuperDataStructureCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getDataStructureAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDataStructureAccess().getDataFieldsDataFieldParserRuleCall_4_0_0());
					}
					lv_dataFields_5_0=ruleDataField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataStructureRule());
						}
						add(
							$current,
							"dataFields",
							lv_dataFields_5_0,
							"de.fhdo.ddmm.data.DataDsl.DataField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getDataStructureAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDataStructureAccess().getDataFieldsDataFieldParserRuleCall_4_1_1_0());
						}
						lv_dataFields_7_0=ruleDataField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDataStructureRule());
							}
							add(
								$current,
								"dataFields",
								lv_dataFields_7_0,
								"de.fhdo.ddmm.data.DataDsl.DataField");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getDataStructureAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleListType
entryRuleListType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListTypeRule()); }
	iv_ruleListType=ruleListType
	{ $current=$iv_ruleListType.current; }
	EOF;

// Rule ListType
ruleListType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='list'
			{
				newLeafNode(otherlv_0, grammarAccess.getListTypeAccess().getListKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getListTypeAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getListTypeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getListTypeAccess().getLeftCurlyBracketKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListTypeAccess().getDataFieldsDataFieldParserRuleCall_0_3_0());
					}
					lv_dataFields_3_0=ruleDataField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListTypeRule());
						}
						add(
							$current,
							"dataFields",
							lv_dataFields_3_0,
							"de.fhdo.ddmm.data.DataDsl.DataField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getListTypeAccess().getCommaKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getListTypeAccess().getDataFieldsDataFieldParserRuleCall_0_4_1_0());
						}
						lv_dataFields_5_0=ruleDataField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getListTypeRule());
							}
							add(
								$current,
								"dataFields",
								lv_dataFields_5_0,
								"de.fhdo.ddmm.data.DataDsl.DataField");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getListTypeAccess().getRightCurlyBracketKeyword_0_5());
			}
		)
		    |
		(
			otherlv_7='list'
			{
				newLeafNode(otherlv_7, grammarAccess.getListTypeAccess().getListKeyword_1_0());
			}
			(
				(
					lv_name_8_0=RULE_ID
					{
						newLeafNode(lv_name_8_0, grammarAccess.getListTypeAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getListTypeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getListTypeAccess().getLeftCurlyBracketKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListTypeAccess().getPrimitiveTypePrimitiveTypeParserRuleCall_1_3_0());
					}
					lv_primitiveType_10_0=rulePrimitiveType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListTypeRule());
						}
						set(
							$current,
							"primitiveType",
							lv_primitiveType_10_0,
							"de.fhdo.ddmm.data.DataDsl.PrimitiveType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getListTypeAccess().getRightCurlyBracketKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleDataField
entryRuleDataField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataFieldRule()); }
	iv_ruleDataField=ruleDataField
	{ $current=$iv_ruleDataField.current; }
	EOF;

// Rule DataField
ruleDataField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_hidden_0_0='hide'
				{
					newLeafNode(lv_hidden_0_0, grammarAccess.getDataFieldAccess().getHiddenHideKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataFieldRule());
					}
					setWithLastConsumed($current, "hidden", true, "hide");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFieldAccess().getPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0());
					}
					lv_primitiveType_1_0=rulePrimitiveType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFieldRule());
						}
						set(
							$current,
							"primitiveType",
							lv_primitiveType_1_0,
							"de.fhdo.ddmm.data.DataDsl.PrimitiveType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFieldAccess().getComplexTypePossiblyImportedComplexTypeParserRuleCall_1_1_0());
					}
					lv_complexType_2_0=rulePossiblyImportedComplexType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFieldRule());
						}
						set(
							$current,
							"complexType",
							lv_complexType_2_0,
							"de.fhdo.ddmm.data.DataDsl.PossiblyImportedComplexType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getDataFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePossiblyImportedComplexType
entryRulePossiblyImportedComplexType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPossiblyImportedComplexTypeRule()); }
	iv_rulePossiblyImportedComplexType=rulePossiblyImportedComplexType
	{ $current=$iv_rulePossiblyImportedComplexType.current; }
	EOF;

// Rule PossiblyImportedComplexType
rulePossiblyImportedComplexType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPossiblyImportedComplexTypeRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getPossiblyImportedComplexTypeAccess().getImportComplexTypeImportCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='::'
			{
				newLeafNode(otherlv_1, grammarAccess.getPossiblyImportedComplexTypeAccess().getColonColonKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPossiblyImportedComplexTypeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getPossiblyImportedComplexTypeAccess().getComplexTypeComplexTypeCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	iv_rulePrimitiveType=rulePrimitiveType
	{ $current=$iv_rulePrimitiveType.current; }
	EOF;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveBooleanAction_0_0(),
						$current);
				}
			)
			otherlv_1='boolean'
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveByteAction_1_0(),
						$current);
				}
			)
			otherlv_3='byte'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimitiveTypeAccess().getByteKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveCharacterAction_2_0(),
						$current);
				}
			)
			otherlv_5='char'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimitiveTypeAccess().getCharKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveDateAction_3_0(),
						$current);
				}
			)
			otherlv_7='date'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimitiveTypeAccess().getDateKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveDoubleAction_4_0(),
						$current);
				}
			)
			otherlv_9='double'
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveFloatAction_5_0(),
						$current);
				}
			)
			otherlv_11='float'
			{
				newLeafNode(otherlv_11, grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_5_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveIntegerAction_6_0(),
						$current);
				}
			)
			otherlv_13='int'
			{
				newLeafNode(otherlv_13, grammarAccess.getPrimitiveTypeAccess().getIntKeyword_6_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveLongAction_7_0(),
						$current);
				}
			)
			otherlv_15='long'
			{
				newLeafNode(otherlv_15, grammarAccess.getPrimitiveTypeAccess().getLongKeyword_7_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveShortAction_8_0(),
						$current);
				}
			)
			otherlv_17='short'
			{
				newLeafNode(otherlv_17, grammarAccess.getPrimitiveTypeAccess().getShortKeyword_8_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimitiveTypeAccess().getPrimitiveStringAction_9_0(),
						$current);
				}
			)
			otherlv_19='string'
			{
				newLeafNode(otherlv_19, grammarAccess.getPrimitiveTypeAccess().getStringKeyword_9_1());
			}
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_BIG_DECIMAL : '-'? RULE_INT ('.' RULE_INT)?;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
