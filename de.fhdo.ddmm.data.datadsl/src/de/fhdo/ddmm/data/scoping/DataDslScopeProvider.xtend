/*
 * generated by Xtext 2.12.0
 */
package de.fhdo.ddmm.data.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import de.fhdo.ddmm.data.DataPackage
import de.fhdo.ddmm.data.DataModel
import de.fhdo.ddmm.utils.DdmmUtils
import de.fhdo.ddmm.data.PossiblyImportedComplexType
import org.eclipse.xtext.EcoreUtil2
import de.fhdo.ddmm.data.Version
import de.fhdo.ddmm.data.Context
import java.util.List
import de.fhdo.ddmm.data.DataStructure

/**
 * Scope provider for data models.
 *
 * 
 */
class DataDslScopeProvider extends AbstractDataDslScopeProvider {
    /**
     * Build scope for a given context and reference
     */
    override getScope(EObject context, EReference reference) {
        val scope = switch (context) {
            /* Possibly imported complex types */
            PossiblyImportedComplexType: context.getScopeForPossiblyImportedComplexTypes(reference)

            /* Data structures */
            DataStructure: context.getScopeForDataStructures(reference)
        }

        if (scope !== null)
            return scope
        // Try default scope resolution, if no scope could be determined
        else if (scope === null)
            return super.getScope(context, reference)
    }

    /**
     * Build scope for possibly imported complex types
     */
    private def getScopeForPossiblyImportedComplexTypes(PossiblyImportedComplexType type,
        EReference reference) {
        if (reference !== DataPackage::Literals.POSSIBLY_IMPORTED_COMPLEX_TYPE__COMPLEX_TYPE)
            return null

        /* Determine container and qualified name parts of possibly imported complex type */
        var EObject container
        var List<String> qualifiedNameParts
        val containingVersion = EcoreUtil2.getContainerOfType(type, Version)
        val containingContext = EcoreUtil2.getContainerOfType(type, Context)
        val containingDataModel = EcoreUtil2.getContainerOfType(type, DataModel)

        if (containingVersion !== null) {
            container = containingVersion
            qualifiedNameParts = containingVersion.qualifiedNameParts
        } else if (containingContext !== null) {
            container = containingContext
            qualifiedNameParts = containingContext.qualifiedNameParts
        } else if (containingDataModel !== null) {
            container = containingDataModel
            qualifiedNameParts = null
        }

        /* Build and return scope */
        val importUri = if (type.import !== null) type.import.importURI
        return DdmmUtils.getScopeForPossiblyImportedConcept(
            container,
            qualifiedNameParts,
            DataModel,
            importUri,
            [containedComplexTypes.toList],
            [it.qualifiedNameParts]
        )
   }

   /**
    * Build scope for possibly imported complex types
    */
   private def getScopeForDataStructures(DataStructure structure, EReference reference) {
        if (reference !== DataPackage::Literals.DATA_STRUCTURE__SUPER)
            return null

        // Data structures may only inherit from data structures in the same model
        val modelRoot = EcoreUtil2.getContainerOfType(structure, DataModel)
        val localStructures = modelRoot.containedComplexTypes
            .filter[it instanceof DataStructure && it != structure]
        return DdmmUtils.getScopeWithRelativeQualifiedNames(
            localStructures.toList,
            [qualifiedNameParts],
            structure,
            structure.qualifiedNameParts,
            DataModel
        )
   }
}