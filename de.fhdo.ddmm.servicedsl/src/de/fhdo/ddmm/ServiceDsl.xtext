/**
 * 
 */
grammar de.fhdo.ddmm.ServiceDsl with de.fhdo.ddmm.technology.TechnologyDsl

import "de.fhdo.ddmm.service"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "de.fhdo.ddmm.data" as data
import "de.fhdo.ddmm.technology" as technology

ServiceModel returns ServiceModel:
    imports+=Import*
    microservices+=Microservice+
;

Import returns Import:
    'import' importType=ImportType 'from' importURI=STRING 'as' name=ID
;

enum ImportType returns ImportType:
    DATATYPES='datatypes' | TECHNOLOGY='technology' | MICROSERVICES='microservices'
;

enum Visibility returns Visibility:
    INTERNAL='internal' | ARCHITECTURE='architecture' | PUBLIC='public'
;

Microservice returns Microservice:
    ('@' 'technology' '(' technologies+=[Import] ')')*
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    visibility=Visibility?
    type=MicroserviceType
    'microservice' name=QualifiedNameWithAtLeastOneLevel ('version' version=ID)?
    // TODO: Inheritance of microservices
    //('extends' super=[Microservice|QualifiedNameWithAtLeastOneLevel])?
    '{'
        ('required' 'microservices' '{'
            requiredMicroservices+=PossiblyImportedMicroservice
            (',' requiredMicroservices+=PossiblyImportedMicroservice)*
        '}')?
        ('required' 'interfaces' '{'
            requiredInterfaces+=PossiblyImportedInterface
            (',' requiredInterfaces+=PossiblyImportedInterface)*
        '}')?
        ('required' 'operations' '{'
            requiredOperations+=PossiblyImportedOperation
            (',' requiredOperations+=PossiblyImportedOperation)*
        '}')?
        interfaces+=Interface+
    '}'
;

PossiblyImportedMicroservice returns PossiblyImportedMicroservice:
    (^import=[Import] '::')? microservice=[Microservice|QualifiedName]
;

PossiblyImportedInterface returns PossiblyImportedInterface:
    (^import=[Import] '::')? interface=[Interface|QualifiedName]
;

PossiblyImportedOperation returns PossiblyImportedOperation:
    (^import=[Import] '::')? operation=[Operation|QualifiedName]
;

Interface returns Interface:
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    (notImplemented?='noimpl')? visibility=Visibility? 'interface' name=ID '{'
        referredOperations+=ReferredOperation*
        operations+=Operation*
    '}'
;

Operation returns Operation:
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    (notImplemented?='noimpl')? visibility=Visibility? name=ID '('
        parameters+=Parameter? (',' parameters+=Parameter)*
    ')' ';'
;

ReferredOperation returns ReferredOperation:
    (protocols+=ProtocolSpecification (protocols+=ProtocolSpecification)?)?
    ('@' 'endpoints' '(' endpoints+=Endpoint+ ')')?
    aspects+=ImportedServiceAspect*
    'refers' operation=[Operation|QualifiedName] ';'
;

Parameter returns Parameter:
    aspects+=ImportedServiceAspect*
    communicationType=CommunicationType
    exchangePattern=ExchangePattern?
    (communicatesFault?='fault')?
    name=ID
    (optional?='?')?
    ':'
    (primitiveType=PrimitiveType | importedType=ImportedType)
    ('=' initializedByOperation=PossiblyImportedOperation)?
;

ImportedType returns ImportedType:
    ^import=[Import] '::' type=[data::Type|QualifiedName]
;

ProtocolSpecification returns ProtocolSpecification:
    '@' communicationType=CommunicationType '('
        protocol=ImportedProtocolAndDataFormat
    ')'
;

ImportedProtocolAndDataFormat returns ImportedProtocolAndDataFormat:
    ^import=[Import] '::' importedProtocol=[technology::Protocol|QualifiedName]
    ('/' dataFormat=[technology::DataFormat])?
;

Endpoint returns Endpoint:
    protocols+=ImportedProtocolAndDataFormat (',' protocols+=ImportedProtocolAndDataFormat)* ':'
    addresses+=STRING (',' addresses+=STRING)* ';'
;

ImportedServiceAspect returns ImportedServiceAspect:
    '@' ^import=[Import] '::' importedAspect=[technology::ServiceAspect|QualifiedName]
    ('('
        (singlePropertyValue=PrimitiveValue
            |
         (values+=PropertyValueAssignment (',' values+=PropertyValueAssignment)*)
        )
    ')')?
;

@Override
PrimitiveValue returns data::PrimitiveValue:
    numericValue=BIG_DECIMAL | booleanValue=BOOLEAN | stringValue=STRING
;

PropertyValueAssignment returns technology::TechnologySpecificPropertyValueAssignment:
    property=[technology::TechnologySpecificProperty] '=' value=PrimitiveValue
;

enum MicroserviceType returns MicroserviceType:
    FUNCTIONAL='functional' | UTILITY='utility' | INFRASTRUCTURE = 'infrastructure'
;

QualifiedNameWithAtLeastOneLevel:
    ID '.' QualifiedName
;