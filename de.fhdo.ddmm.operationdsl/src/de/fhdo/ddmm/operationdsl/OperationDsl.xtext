// automatically generated by Xtext
grammar de.fhdo.ddmm.operationdsl.OperationDsl with de.fhdo.ddmm.ServiceDsl

import "de.fhdo.ddmm.operation"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "de.fhdo.ddmm.technology" as technology
import "de.fhdo.ddmm.service" as service
import "de.fhdo.ddmm.data" as data

OperationModel returns OperationModel:
    imports+=Import+
    containers+=Container*
    infrastructureNodes+=InfrastructureNode*
;

@Override
enum ImportType returns service::ImportType:
    TECHNOLOGY='technology' | MICROSERVICES='microservices'
;

Container returns Container:
    ('@' 'technology' '(' technologies+=[service::Import] ')')+
    'container' name=ID
    'deployment' 'technology' deploymentTechnology=DeploymentTechnologyReference
    ('with' 'operation' 'environment'
        operationEnvironment=[technology::OperationEnvironment|STRING]
    )?
    'deploys' deployedServices+=ImportedMicroservice (',' deployedServices+=ImportedMicroservice)*
    '{'
        ('aspects' '{'
            aspects+=ImportedOperationAspect+
        '}')?

        ('default' 'values' '{'
            // Must not be empty
            (
                defaultServicePropertyValues+=PropertyValueAssignment+
                |
                ('basic' 'endpoints' '{'
                    defaultBasicEndpoints+=BasicEndpoint+
                '}')
                |
                (
                    defaultServicePropertyValues+=PropertyValueAssignment+

                    'basic' 'endpoints' '{'
                        defaultBasicEndpoints+=BasicEndpoint+
                    '}'
                )
            )
        '}')?

        deploymentSpecifications+=ServiceDeploymentSpecification*
    '}'
;

DeploymentTechnologyReference returns DeploymentTechnologyReference:
    ^import=[service::Import] '::'
    deploymentTechnology=[technology::DeploymentTechnology|QualifiedName]
;

InfrastructureNode returns InfrastructureNode:
    ('@' 'technology' '(' technologies+=[service::Import] ')')+
    name=ID 'is' infrastructureTechnology=InfrastructureTechnologyReference
    ('with' 'operation' 'environment'
        operationEnvironment=[technology::OperationEnvironment|STRING]
    )?
    'used' 'by' deployedServices+=ImportedMicroservice (',' deployedServices+=ImportedMicroservice)*
    '{'
        ('aspects' '{'
            aspects+=ImportedOperationAspect+
        '}')?

        ('default' 'values' '{'
            defaultServicePropertyValues+=PropertyValueAssignment+
        '}')?

        ('endpoints' '{'
            endpoints+=BasicEndpoint+
        '}')?

        deploymentSpecifications+=ServiceDeploymentSpecification*
    '}'
;

InfrastructureTechnologyReference returns InfrastructureTechnologyReference:
    ^import=[service::Import] '::'
    infrastructureTechnology=[technology::InfrastructureTechnology|QualifiedName]
;

ProtocolAndDataFormat returns ProtocolAndDataFormat:
    technology=[service::Import] '::'
    protocol=[technology::Protocol|QualifiedName] ('/' dataFormat=[technology::DataFormat])?
;

BasicEndpoint returns BasicEndpoint:
    protocols+=ProtocolAndDataFormat (',' protocols+=ProtocolAndDataFormat)* ':'
    addresses+=STRING (',' addresses+=STRING)* ';'
;

ServiceDeploymentSpecification returns ServiceDeploymentSpecification:
    ^import=[service::Import] '::' service=[ImportedMicroservice|QualifiedNameWithAtLeastOneLevel]
    '{'
        servicePropertyValues+=PropertyValueAssignment*
        ('basic' 'endpoints' '{'
            basicEndpoints+=BasicEndpoint+
        '}')?
    '}'
;

ImportedMicroservice returns ImportedMicroservice:
    ^import=[service::Import] '::'
    microservice=[service::Microservice|QualifiedNameWithAtLeastOneLevel]
;

@Override
PropertyValueAssignment returns technology::TechnologySpecificPropertyValueAssignment:
    property=[technology::TechnologySpecificProperty] '=' value=PrimitiveValue
;

ImportedOperationAspect returns ImportedOperationAspect:
    technology=[service::Import] '::' aspect=[technology::OperationAspect|QualifiedName]
    (
        ('(' (
            singlePropertyValue=PrimitiveValue
            |
            (values+=PropertyValueAssignment (',' values+=PropertyValueAssignment)*)
        ) ')')
    |
        ';'
    )
;

@Override
PrimitiveValue returns data::PrimitiveValue:
    numericValue=BIG_DECIMAL | booleanValue=BOOLEAN | stringValue=STRING
;